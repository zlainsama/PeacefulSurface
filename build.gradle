plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

import net.minecraftforge.gradle.common.tasks.SignJar

import java.nio.file.Files

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = 'https://www.cursemaven.com' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("curse.maven:enhancedcelestials-438447:4393946")
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version       : forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors         : mod_authors, mod_description: mod_description
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    from 'LICENSE.txt'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        System.getenv('SIGNJAR_KEYSTORE') != null
    }

    if (System.getenv('SIGNJAR_KEYSTORE') != null) {
        keyStore = Files.createTempFile(getTemporaryDir().toPath(), 'keystore-', '.jks').toString()
        file(keyStore).withOutputStream { output ->
            output.write(Base64.getDecoder().decode(System.getenv('SIGNJAR_KEYSTORE')))
        }
        alias = System.getenv('SIGNJAR_ALIAS')
        storePass = System.getenv('SIGNJAR_STOREPASS')
        keyPass = System.getenv('SIGNJAR_KEYPASS')
        inputFile = jar.archiveFile
        outputFile = jar.archiveFile
    }

    doLast {
        delete keyStore
    }
}

build.dependsOn signJar

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
